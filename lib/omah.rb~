#!/usr/bin/env ruby

# file: omah.rb
# title: Offline Mail Helper

require 'zip'
require 'nokorexi'
require 'dynarex-daily'

module Library

  def fetch_file(filename)

    lib = File.dirname(__FILE__)
    File.read File.join(lib,'..','stylesheet',filename)

  end
end

class Omah

  def initialize(options={})

    opt = {user: 'user'}.merge options
    @user = opt[:user]
    FileUtils.mkdir_p @user # attempt to mkdir regardless if it already exists
    Dir.chdir @user
    
    dailyfile = 'dynarexdaily.xml'
    
    x = if File.exists? dailyfile then dailyfile
    else
      'messages[date]/message(id, tags, from, to, subject, date, ' \
        + 'txt_filepath, html_filepath, attachment1, attachment2, attachment3)'
    end
    
    @dd = DynarexDaily.new x, {dir_archive: :yearly}

  end

  def store messages

    messages.each do |msg| 

      subject = msg[:subject]
      title = subject.gsub(/\W+/,'-')[0,30].sub(/-$/,'')

      a = @dd.all.select {|x| x.subject == subject}
      
      ordinal = a.any? ? '.' + a.length.to_s : ''
      txt_file = title + ordinal + '.txt'
      html_file = title + ordinal + '.html'

      id = msg[:id]
      next if @dd.find_by_id id

      path = archive()      
      txt_filepath = File.join(path, txt_file)
      html_filepath = File.join(path, html_file)
      

      FileUtils.mkdir_p path

      File.write txt_filepath, text_sanitiser(msg[:body_text].to_s)
      File.write html_filepath, html_sanitiser(msg[:body_html].to_s)
      
      parts_path = []
      
      # save the attachments
      if msg[:attachments].length > 0 then
        
        attachment_path = File.join(path, title + ordinal)
        FileUtils.mkdir_p attachment_path
        
        if msg[:attachments].length < 4 then
          
          msg[:attachments].each.with_index do |x, i|
            
            name, buffer = x
            parts_path[i] = File.join(attachment_path, name)
            File.write parts_path[i], buffer
            
          end
          
        else
          
          # make a zip file and add the attachments to it
          
          zipfile = File.join(attachment_path, title[0,12].downcase + '.zip')
          parts_path[0] = zipfile

          Zip::File.open(zipfile, Zip::File::CREATE) do |x|

            msg[:attachments].each do |filename, buffer| 
              x.get_output_stream(filename) {|os| os.write buffer }
            end

          end          
          
        end        

      end
      
      msg.delete :attachments

      @dd.create msg.merge(txt_filepath: txt_filepath, \
            html_filepath: html_filepath, attachment1: parts_path[0], \
                        attachment2: parts_path[1], attachment3: parts_path[2])
      
      
    end

    @dd.save
  end
  
  private
  
  def archive()
    
    t = Time.now
    path = File.join ['archive', t.year.to_s, \
                          Date::MONTHNAMES[t.month].downcase[0..2], t.day.to_s]

  end
  

  def html_sanitiser(s)

    begin
      Rexle.new s
      s2 = s
    rescue
      doc = Nokorexi.new(s).to_doc
      s2 = doc.xml
    end

  end

  def text_sanitiser(s)

    begin
      Rexle.new "<root>#{s}</root>"
      s2 = s
    rescue
      doc = Nokorexi.new(s).to_doc
      s2 = doc.xml
    end

  end
    

end